<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>五种值类型的操作</title>
    <link href="/2021/02/12/%E4%BA%94%E7%A7%8DValue%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C/%E4%BA%94%E7%A7%8DValue%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/02/12/%E4%BA%94%E7%A7%8DValue%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C/%E4%BA%94%E7%A7%8DValue%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在对redis有个基本的了解以后，相关的键值操作也是少不了的，上篇文章就学习了相关的key操作，而这次👴就开始学习与value有关的操作</p><h1 id="String类型的操作"><a href="#String类型的操作" class="headerlink" title="String类型的操作"></a>String类型的操作</h1><h2 id="String的内存储存"><a href="#String的内存储存" class="headerlink" title="String的内存储存"></a>String的内存储存</h2><p><img src="/img/redis-learning/String/redis0.png" alt="储存模型"><br>key,value都是String类</p><h2 id="设置key-value"><a href="#设置key-value" class="headerlink" title="设置key-value"></a>设置key-value</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> key <span class="hljs-comment">value</span> <br></code></pre></td></tr></table></figure><h2 id="获取key-value"><a href="#获取key-value" class="headerlink" title="获取key-value"></a>获取key-value</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">get</span> <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><h2 id="设置-获取多个key-value"><a href="#设置-获取多个key-value" class="headerlink" title="设置/获取多个key-value"></a>设置/获取多个key-value</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">mset</span></span> key value key value key value...<br><span class="hljs-function"><span class="hljs-title">mget</span></span> key1 key2 key3...<br></code></pre></td></tr></table></figure><p><img src="/img/redis-learning/String/redis14.png" alt="mget&amp;mset"></p><hr><h2 id="获取并设置新值"><a href="#获取并设置新值" class="headerlink" title="获取并设置新值"></a>获取并设置新值</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">getset key value</span><br></code></pre></td></tr></table></figure><blockquote><p>设置成功会返回原值(如果新值跟旧值相同，也会操作成功)<br><img src="/img/redis-learning/String/redis15.png" alt="getset"></p></blockquote><hr><h2 id="获取对应key的value长度"><a href="#获取对应key的value长度" class="headerlink" title="获取对应key的value长度"></a>获取对应key的value长度</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">strlen</span> <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p><img src="/img/redis-learning/String/redis16.png" alt="strlen"></p><hr><h2 id="追加对应key的value内容"><a href="#追加对应key的value内容" class="headerlink" title="追加对应key的value内容"></a>追加对应key的value内容</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">append</span> <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p><img src="/img/redis-learning/String/redis17.png" alt="append"><br><strong>返回的是追加内容后value的长度</strong></p><hr><h2 id="截取value内容"><a href="#截取value内容" class="headerlink" title="截取value内容"></a>截取value内容</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">getrange<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">end</span> //<span class="hljs-keyword">start</span> <span class="hljs-keyword">end</span>表示索引,从<span class="hljs-number">0</span>开始<br></code></pre></td></tr></table></figure><p><img src="/img/redis-learning/String/redis18.png" alt="getrange"></p><hr><h2 id="设置key-value并指定存活时间"><a href="#设置key-value并指定存活时间" class="headerlink" title="设置key-value并指定存活时间"></a>设置key-value并指定存活时间</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">setex key seconds value <span class="hljs-regexp">//</span>秒<br>psetex key milliseconds value <span class="hljs-regexp">//</span>毫秒<br></code></pre></td></tr></table></figure><p><img src="/img/redis-learning/String/redis19.png" alt="setex&amp;psetex"></p><hr><h2 id="Setnx"><a href="#Setnx" class="headerlink" title="Setnx"></a>Setnx</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">setnx key value</span><br></code></pre></td></tr></table></figure><blockquote><p>如果key存在，返回0，并不做任何操作（不覆盖），如果不存在，返回1，设置key-value</p></blockquote><p><img src="/img/redis-learning/String/redis20.png" alt="setnx"></p><hr><h2 id="原子操作msetnx"><a href="#原子操作msetnx" class="headerlink" title="原子操作msetnx"></a>原子操作msetnx</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">msetnx <span class="hljs-built_in">key</span> value <span class="hljs-built_in">key</span> value <span class="hljs-built_in">key</span> value....<br></code></pre></td></tr></table></figure><p><strong>只要有一个key存在，则不做任何添加操作！</strong><br><img src="/img/redis-learning/String/redis21.png" alt="msetnx"></p><hr><h2 id="减操作"><a href="#减操作" class="headerlink" title="减操作"></a>减操作</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">decr <span class="hljs-built_in">key</span><br>decrby <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p><strong>只有key对应的value是整型时，操作才会成功！否则会报错</strong><br><img src="/img/redis-learning/String/redis22.png" alt="decr"></p><hr><p><img src="/img/redis-learning/String/redis23.png" alt="decrby"></p><hr><h2 id="加操作"><a href="#加操作" class="headerlink" title="加操作"></a>加操作</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">incr <span class="hljs-built_in">key</span><br>incrby <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p><strong>同减操作!</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">incrbyfloat key value<span class="hljs-regexp">//</span>浮点数的加操作<br></code></pre></td></tr></table></figure><blockquote><p>精度保留17位,<strong><em>进1法</em></strong>舍去17位之后的数<br><img src="/img/redis-learning/String/redis24.png" alt="incrbyfloat"></p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr><h1 id="List类型的操作"><a href="#List类型的操作" class="headerlink" title="List类型的操作"></a>List类型的操作</h1><h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><p><img src="/img/redis-learning/List/1.png" alt="内存模型"><br><strong>相当于java中的list集合,元素有序,且可以重复</strong><br>Redis中List是个堆栈，也遵循FILO（先进后出）的原则.</p><h2 id="创建、遍历列表"><a href="#创建、遍历列表" class="headerlink" title="创建、遍历列表"></a>创建、遍历列表</h2><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">lpush <span class="hljs-built_in">key</span> [value...] //从左<span class="hljs-built_in">push</span><br>lpushx <span class="hljs-built_in">key</span> [value...] //从左<span class="hljs-built_in">push</span>,且<span class="hljs-built_in">key</span>是已经存在的<br>rpush <span class="hljs-built_in">key</span> [value...] //从右<span class="hljs-built_in">push</span><br>rpushx <span class="hljs-built_in">key</span> [value...] //从右<span class="hljs-built_in">push</span>,且<span class="hljs-built_in">key</span>是已经存在的<br></code></pre></td></tr></table></figure><p><strong>lpush最后入栈的元素就是栈首<br>rpush最后入栈的元素就是栈尾</strong></p><ul><li>push成功后返回堆栈长度</li><li>pushx如果key不存在，不会报错，返回0表示key对应的堆栈不存在，如果存在，返回push后的堆栈长度</li><li>pushx不能创建列表<h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-keyword">lrange</span> key start end //遍历某一区间的列表(从栈首遍历)<br></code></pre></td></tr></table></figure><img src="/img/redis-learning/List/2.png" alt="push&amp;range"></li></ul><hr><h2 id="移除列表元素"><a href="#移除列表元素" class="headerlink" title="移除列表元素"></a>移除列表元素</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">lpop key <span class="hljs-regexp">//</span>移除并返回栈首的元素<br>rpop key <span class="hljs-regexp">//</span>移除并返回栈尾的元素<br></code></pre></td></tr></table></figure><p><img src="/img/redis-learning/List/3.png" alt="pop"></p><hr><h2 id="获取列表长度"><a href="#获取列表长度" class="headerlink" title="获取列表长度"></a>获取列表长度</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">llen key</span><br></code></pre></td></tr></table></figure><h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-keyword">lset</span> key index newvalue<br></code></pre></td></tr></table></figure><blockquote><p>修改的是key对应列表中索引为index的值,即 <strong>list[index]</strong> 的值</p></blockquote><p><img src="/img/redis-learning/List/4.png" alt="set"></p><hr><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-keyword">lindex</span> key index<br></code></pre></td></tr></table></figure><p><strong>获取list[index]的元素</strong><br><img src="/img/redis-learning/List/5.png" alt="set"></p><hr><h2 id="删除重复元素"><a href="#删除重复元素" class="headerlink" title="删除重复元素"></a>删除重复元素</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">lrem <span class="hljs-built_in">key</span> <span class="hljs-built_in">count</span> <span class="hljs-built_in">value</span><br></code></pre></td></tr></table></figure><p><strong>从左遍历列表，删除count个重复的元素value</strong></p><ul><li>如果value不存在，则不会报错，只是返回0</li><li>如果value存在，返回的是删除的value个数</li></ul><p><img src="/img/redis-learning/List/6.png" alt="rem"></p><hr><h2 id="截取列表"><a href="#截取列表" class="headerlink" title="截取列表"></a>截取列表</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">ltrim<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><strong>截取list中start到end的部分</strong></p><ul><li>截取后key对应的列表<strong>被替换成原先列表中截取的部分</strong>，且截取部分的元素<strong>索引也会从0开始从新编号</strong></li><li>如果截取部分的索引 <strong>不在list的范围内(超出范围)</strong> 那么截取操作的结果也是OK的！！！  <strong>不会报错</strong> ，但截取后key的列表为空(截取部分为空，所以列表也为空)</li></ul><p><img src="/img/redis-learning/List/7.png" alt="trim"></p><hr><h2 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-keyword">linsert</span> key before value //在<span class="hljs-keyword">list</span>中的before元素前插入value<br><span class="hljs-keyword">linsert</span> key <span class="hljs-keyword">after</span> value //在<span class="hljs-keyword">list</span>中的<span class="hljs-keyword">after</span>元素后插入value<br></code></pre></td></tr></table></figure><ul><li><strong>如果list中存在重复的before(after)元素，则会选取从左遍历的第一个出现的before(after)元素</strong></li><li>返回插入元素后列表的长度</li></ul><p><img src="/img/redis-learning/List/8.png" alt="insert"></p><hr><h1 id="Set类型的操作"><a href="#Set类型的操作" class="headerlink" title="Set类型的操作"></a>Set类型的操作</h1><h2 id="内存模型-1"><a href="#内存模型-1" class="headerlink" title="内存模型"></a>内存模型</h2><p><img src="/img/redis-learning/Set/1.png" alt="内存模型"><br><strong>特点：是一个元素无序，且元素不可重复的集合</strong></p><h2 id="集合的创建与遍历"><a href="#集合的创建与遍历" class="headerlink" title="集合的创建与遍历"></a>集合的创建与遍历</h2><h3 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sadd</span> key value or<span class="hljs-meta"> [value...]</span><br></code></pre></td></tr></table></figure><ul><li><strong>创建时，如果value中有重复的，也能成功创建，重复的value会自动的忽略</strong></li><li>创建后返回集合的大小</li></ul><h3 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">smembers key</span><br></code></pre></td></tr></table></figure><p><strong>注意！这里输出是有序的是因为Redis会自动比较值大小再输出！并不改变集合本身！这个集合的底层仍是无序的！这与集合的特点不矛盾！</strong><br><img src="/img/redis-learning/Set/2.png" alt="sadd&amp;smembers"></p><h2 id="查看集合的大小"><a href="#查看集合的大小" class="headerlink" title="查看集合的大小"></a>查看集合的大小</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">scard key</span><br></code></pre></td></tr></table></figure><ul><li>返回集合大小</li></ul><h2 id="元素的删除"><a href="#元素的删除" class="headerlink" title="元素的删除"></a>元素的删除</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">spop <span class="hljs-built_in">key</span> <span class="hljs-built_in">count</span> <span class="hljs-comment">//随机删除</span><br>srem <span class="hljs-built_in">key</span> <span class="hljs-built_in">value</span> <span class="hljs-built_in">or</span> [<span class="hljs-built_in">value</span>....] <span class="hljs-comment">//删除一个或多个指定元素</span><br></code></pre></td></tr></table></figure><ul><li>在集合中spop随机选取count个元素删除，并返回删除的元素,srem则是删除指定的元素</li><li>spop如果删除的个数超过集合的大小，则默认将集合的所有元素删除</li><li>srem如果删除的元素不存在，则不会执行删除操作，返回0<br><img src="/img/redis-learning/Set/3.png" alt="pop"></li></ul><hr><p><img src="/img/redis-learning/Set/4.png" alt="pop"></p><hr><p><img src="/img/redis-learning/Set/6.png" alt="rem"></p><hr><h2 id="元素的移动"><a href="#元素的移动" class="headerlink" title="元素的移动"></a>元素的移动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smove <span class="hljs-built_in">source</span> destination member<br></code></pre></td></tr></table></figure><ul><li>只能用于集合之间的元素移动</li><li>移动不存在的member不会报错，返回0(不发生移动)</li><li>移动后，返回移动元素的个数（一次移一个）</li></ul><p><img src="/img/redis-learning/Set/5.png" alt="smove"></p><hr><h2 id="判断元素是否存在"><a href="#判断元素是否存在" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">sismember <span class="hljs-built_in">key</span> <span class="hljs-built_in">member</span><br></code></pre></td></tr></table></figure><hr><h1 id="ZSet类型的操作"><a href="#ZSet类型的操作" class="headerlink" title="ZSet类型的操作"></a>ZSet类型的操作</h1><h1 id="Hash类型的操作"><a href="#Hash类型的操作" class="headerlink" title="Hash类型的操作"></a>Hash类型的操作</h1><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初始Redis</title>
    <link href="/2021/02/10/%E5%88%9D%E5%A7%8BRedis/%E5%88%9D%E5%A7%8BRedis/"/>
    <url>/2021/02/10/%E5%88%9D%E5%A7%8BRedis/%E5%88%9D%E5%A7%8BRedis/</url>
    
    <content type="html"><![CDATA[<h1 id="初学Redis"><a href="#初学Redis" class="headerlink" title="初学Redis"></a>初学Redis</h1><blockquote><p>在每学习一门新技术前，了解它是用于解决什么问题的？怎么解决的？应用场景是啥？与别的技术比，又有啥优势？往往能够对这个技术有个非常好的自我认知与定位</p></blockquote><h2 id="Redis特点"><a href="#Redis特点" class="headerlink" title="Redis特点"></a>Redis特点</h2><ul><li>基于<strong>内存</strong>进行储存，操作的是内存中的数据</li><li>支持<strong>key-value</strong>的储存形式</li><li>底层是用<strong>C语言</strong>编写的</li><li>NoSQL类数据库(Not only SQL) 非关系型数据库</li><li>Redis的操作都是<strong>原子性</strong>的，要么都执行成功，要么都执行失败</li><li>支持数据持久化机制(也是Redis称为数据库的重要原因)</li><li>是单进程，单线程的设计（不支持并发，不存在线程安全问题） –&gt; 设计分布式锁</li></ul><blockquote><p>所以可知Redis的运行处理效率非常高,而且没有数据表的概念,直接用key-value的形式完成对数据的管理</p></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>数据模型比较简单</li><li>对数据库性能要求较高</li><li>不需要高度的数据一致性（NoSQL对事务支持不是很好）</li><li>…等等</li></ul><h2 id="支持的5种数据类型"><a href="#支持的5种数据类型" class="headerlink" title="支持的5种数据类型"></a>支持的5种数据类型</h2><ul><li>String 字符串</li><li>List 列表</li><li>Set 无序集合</li><li>ZSet 有序集合</li><li>Hash 哈希</li></ul><blockquote><p>哈希的结构在Redis中很特殊，其结构为<br><strong>Key : { Key : value }</strong></p></blockquote><h2 id="Redis的安装与使用-Windows环境"><a href="#Redis的安装与使用-Windows环境" class="headerlink" title="Redis的安装与使用(Windows环境)"></a>Redis的安装与使用(Windows环境)</h2><p>Redis的安装是我们接触Redis时出现的第一个难题</p><p><strong>注意</strong><br></p><blockquote><p>Redis官方是没有windows环境下的安装包的!也就是说，要想使用原生的Redis，只能在Linux环境下使用!<br><strong>(微软其实做过Windows下的Redis环境，但GitHub上的代码很久没更新，说明可能弃坑了！)</strong>.</p></blockquote><p><br>那么，使用windows的用户是不是用不了呢？并不是！<br><br><strong>以下有三种方法能够在Windows下使用Redis！</strong></p><ol><li>通过<strong>虚拟机</strong>来使用Redis</li><li>通过安装<strong>WSL</strong>来使用Redis </li><li>通过安装Github上其他大神的Redis包，来使用redis<br>链接如下:<a href="https://github.com/tporadowski/redis/releases">Redis Install</a></li></ol><p>上面三种方法怎么选呢？我的意见如下:</p><ul><li>第一种:简单粗暴，但并不推荐，虚拟机占用资源十分大！如果两平台操作，难免会卡顿，影响操作体验,不介意者推荐使用！<br></li><li>第二种:WSL意思是Windows的子系统，这个子系统能够安装Linux的分发版，不同的是没有图形界面操作，只有命令行操作，所以占用空间小，但是安装过程以及配置操作较繁杂,没有耐心整的话也不推荐<br></li><li>第三种: 安装过程简单粗暴，使用也不复杂，缺点就是不是原生的，没有官方的技术支持，未知的bug和版本的小落后等，但对于正在学习的我们来说够用了<br></li></ul><blockquote><p><strong>注意</strong> 第三种方法的安装只支持64位系统！</p></blockquote><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤:"></a>安装步骤:</h3><blockquote><p>对于我来讲，第三种方法是最简便的<del>(老懒狗了)</del>，所以就简单的记录下，第三种的安装步骤</p></blockquote><ol><li>打开链接，选择msi安装包(原因看下面！)</li><li>下载好后，创建一个文件夹来存放redis，推荐放系统盘以外的盘</li><li>以管理员身份运行安装包(安装过程如果出现错误代码2502，2503，多半是权限不足),具体怎么以管理员身份运行，可以自行百度”以管理员身份运行msi文件”,</li><li>跟着提示走，Next，选定Redis存放位置(放在第二步创建的文件里),ADD PATH(省去自己配置环境变量的步骤，所以选msi文件安装，<del>我猜的</del>),整完这些后，提示安装成功就能退出安装程序了.</li></ol><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤:"></a>使用步骤:</h3><ol><li>输入<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">redis-server</span> <span class="hljs-selector-tag">--service-install</span> <span class="hljs-selector-tag">redis</span><span class="hljs-selector-class">.windows</span><span class="hljs-selector-class">.conf</span><br></code></pre></td></tr></table></figure>部署Redis在windows下的服务(关闭cmd后redis服务就会自动关闭)</li><li>(配置好环境变量后)启动cmd命令行,输入<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">redis-<span class="hljs-keyword">server</span>.exe<br></code></pre></td></tr></table></figure>启动redis服务，命令台会出现相应的信息<img src="/img/redis-learning/String/redis1.PNG" alt="开启服务"></li><li>新开一个cmd<br>(第2步的cmd别关，否则无法访问redis服务端！)，输入<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">redis-<span class="hljs-keyword">cli</span>.exe <br></code></pre></td></tr></table></figure>开始访问redis(默认端口为6379)</li><li>输入ping，查看输出,输入 set a 111 存储键值对，输入get a取出键值对，查看输出结果</li><li>以上如果都能正常输出，那么就能正常使用redis <img src="/img/redis-learning/String/redis2.PNG" alt="输入和输出"></li></ol><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令:"></a>常用指令:</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">redis-server --service-stop <span class="hljs-regexp">//</span>停止服务<br>redis-server --service-start <span class="hljs-regexp">//</span>开启服务<br>redis-server --service-uninstall <span class="hljs-regexp">//</span>卸载服务<br>redis-cli -p 端口号 --raw <span class="hljs-regexp">//</span>指定端口号启动，并让转化中文编码，显示中文<br></code></pre></td></tr></table></figure><h3 id="修改Redis配置"><a href="#修改Redis配置" class="headerlink" title="修改Redis配置"></a>修改Redis配置</h3><ul><li><p>启动端口修改: 安装目录下找到redis.windows-service.conf,打开后，搜索port,直接修改即可</p><blockquote><p>修改完后不能直接重新启动Redis!否则配置不会生效！应用命令<br></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">redis-server</span> <span class="hljs-selector-tag">redis</span><span class="hljs-selector-class">.windows</span><span class="hljs-selector-class">.conf</span><br></code></pre></td></tr></table></figure><p>使<strong>全部修改的配置</strong>生效！</p></li><li><p>database库</p><blockquote><p>存放数据的一个基本单元，每个库都能存放key-value键值对，redis中每个库都有独有的id，从0开始，redis默认有16个库(0-15号)，默认为0号库，每个库之间数据是独立的！</p></blockquote></li></ul><p><strong>库的数目也能修改，在redis.windows.conf中搜索databases 更改数字即可！</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">select 库id <span class="hljs-regexp">//</span>选择某个库<br>flushDB <span class="hljs-regexp">//</span>清空当前库的数据<br>flushAll <span class="hljs-regexp">//</span>清空全部库的数据<br></code></pre></td></tr></table></figure><p><img src="/img/redis-learning/String/redis3.png" alt="FLUSHDB"></p><hr><p><img src="/img/redis-learning/String/redis4.png" alt="FLUSHALL"></p><hr><h2 id="操作KEY的指令"><a href="#操作KEY的指令" class="headerlink" title="操作KEY的指令"></a>操作KEY的指令</h2><h3 id="删除key"><a href="#删除key" class="headerlink" title="删除key"></a>删除key</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">del</span> <span class="hljs-built_in">key</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">del</span> [<span class="hljs-built_in">key</span>...]<br></code></pre></td></tr></table></figure><ul><li>删除一个或多个key，不存在的会被忽略</li><li>返回删除key的数量<br><img src="/img/redis-learning/String/redis5.png" alt="del key"></li></ul><hr><h3 id="检查key存在与否"><a href="#检查key存在与否" class="headerlink" title="检查key存在与否"></a>检查key存在与否</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">exists</span> key<br></code></pre></td></tr></table></figure><ul><li>若key存在返回1，反之返回0<br><img src="/img/redis-learning/String/redis6.png" alt="exists key"></li></ul><hr><h3 id="设置key存活时间"><a href="#设置key存活时间" class="headerlink" title="设置key存活时间"></a>设置key存活时间</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">expire key seconds <span class="hljs-regexp">//</span>以秒为单位<br>pexpire key millsseconds <span class="hljs-regexp">//</span>以毫秒为单位<br>pexpireat key milliseconds <span class="hljs-regexp">//</span>以毫秒为单位的unix时间戳<br></code></pre></td></tr></table></figure><ul><li>设置key存活时间(秒)，一旦过期，key就会被删除</li><li>设置成功返回1，反之返回0</li><li>时间复杂度O(1)</li></ul><p><img src="/img/redis-learning/String/redis7.png" alt="expire key"></p><hr><h3 id="查看key剩余存活时间"><a href="#查看key剩余存活时间" class="headerlink" title="查看key剩余存活时间"></a>查看key剩余存活时间</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ttl key <span class="hljs-regexp">//</span>以秒为单位<br>pttl KEY <span class="hljs-regexp">//</span>以毫秒为单位<br></code></pre></td></tr></table></figure><ul><li>查看对应key的剩余存活时间</li><li>返回-1，key存活时间为永久，返回-2，key不存在，返回&gt;=0，key的剩余存活时间</li></ul><p><img src="/img/redis-learning/String/redis11.png" alt="ttl"></p><h3 id="keys匹配"><a href="#keys匹配" class="headerlink" title="keys匹配"></a>keys匹配</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">例子<br>keys * <span class="hljs-regexp">//</span> 匹配所有keys<br>keys h?llo <span class="hljs-regexp">//</span>匹配hello,hallo,hxllo等  ?--&gt;匹配一个字符<br>keys h*llo <span class="hljs-regexp">//</span>匹配hllo和heeeeello等 *--&gt;匹配多个字符<br>keys h[ae]llo <span class="hljs-regexp">//</span>匹配hallo,hello,不匹配hllo,特殊符号用\隔开<br></code></pre></td></tr></table></figure><ul><li>返回符合匹配的key列表<br><img src="/img/redis-learning/String/redis8.png" alt="keys"></li></ul><hr><h3 id="key的移动"><a href="#key的移动" class="headerlink" title="key的移动"></a>key的移动</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">move</span> key dbid<br></code></pre></td></tr></table></figure><ul><li>移动成功返回1，反之返回0<br><img src="/img/redis-learning/String/redis9.png" alt="移动成功"></li></ul><hr><p><img src="/img/redis-learning/String/redis10.png" alt="移动失败"></p><hr><h3 id="randomkey"><a href="#randomkey" class="headerlink" title="randomkey"></a>randomkey</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">randomkey</span><br></code></pre></td></tr></table></figure><ul><li>当数据库不为空，随机返回一个key，为空则返回nil</li></ul><p><img src="/img/redis-learning/String/redis12.png" alt="randomkey"></p><hr><h3 id="key的重命名"><a href="#key的重命名" class="headerlink" title="key的重命名"></a>key的重命名</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">rename</span> <span class="hljs-built_in">key</span> newkey<br></code></pre></td></tr></table></figure><ul><li>将key重命名为newkey,如果key和newkey相同，或者key不存在，返回错误，如果newkey存在，则会覆盖旧值(key对应的value会被newkey对应的value覆盖)<br><img src="/img/redis-learning/String/redis13.png" alt="rename"></li></ul><hr><h3 id="查看key的值类型"><a href="#查看key的值类型" class="headerlink" title="查看key的值类型"></a>查看key的值类型</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> keyname<br></code></pre></td></tr></table></figure><ul><li>返回对应key的value的类型<blockquote><p>返回值: <br>none(不存在) <br> string(字符串)<br> list(列表)<br> set(集合)<br> zset(有序集合)<br> hash(哈希)<br></p></blockquote></li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>上手学就翻车，好家伙，安装redis这一步就整了好久，初学下来就只记得redis的特点和安装步骤，希望👴没事。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Markdown</title>
    <link href="/2021/02/08/%E5%88%9D%E8%AF%86Markdown/%E5%88%9D%E8%AF%86Markdown/"/>
    <url>/2021/02/08/%E5%88%9D%E8%AF%86Markdown/%E5%88%9D%E8%AF%86Markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown的语法"><a href="#Markdown的语法" class="headerlink" title="Markdown的语法"></a>Markdown的语法</h1><blockquote><p>Markdown是一门标记性的语言，也是我用来写博客必须学会的，所以该博文用于记录Markdown的各种语法，并学会使用Markdown.</p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//代码块语法:</span><br><span class="hljs-string">&#x27; ```Shell:  代码部分 ``` &#x27;</span><br><span class="hljs-comment">//或者直接使用: </span><br><span class="hljs-string">``</span><span class="hljs-string">` 代码部分  `</span><span class="hljs-string">``</span><br></code></pre></td></tr></table></figure><h3 id="Java的代码块"><a href="#Java的代码块" class="headerlink" title="Java的代码块"></a>Java的代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//用 ``` Java  ``` 即可生成Java样式的代码块，其他语言同理 </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String []args)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello Markdown!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C系的代码块"><a href="#C系的代码块" class="headerlink" title="C系的代码块"></a>C系的代码块</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Hello Markdown!&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">//Linux下的命令<br>pwd<br>mkdir<br>touch<br>gcc...<br></code></pre></td></tr></table></figure><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><blockquote><p>标题用#号来表示标题，其对应了HTML的5个H标题</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># ---&gt; h1 一级标题<br>## ---&gt; h2 二级标题<br>### ---&gt; h3 三级标题<br>#### ---&gt; h4 四级标题<br>##### ---&gt; h5 五级标题<br>###### ---&gt; h6 六级标题<br></code></pre></td></tr></table></figure><h2 id="与字体有关的语法"><a href="#与字体有关的语法" class="headerlink" title="与字体有关的语法"></a>与字体有关的语法</h2><h3 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**内容**</span> 加粗字体,内容跟*号不分离<br></code></pre></td></tr></table></figure><p><strong>Hello Markdown!</strong> </p><h3 id="字体倾斜"><a href="#字体倾斜" class="headerlink" title="字体倾斜"></a>字体倾斜</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*内容*</span> 倾斜字体<br></code></pre></td></tr></table></figure><p><em>Hello Markdown!</em></p><h3 id="字体高亮"><a href="#字体高亮" class="headerlink" title="字体高亮"></a>字体高亮</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml">=<span class="ruby">=内容== 高亮内容</span><br></code></pre></td></tr></table></figure><p>==Hello Markdown!==</p><h3 id="内容删除样式"><a href="#内容删除样式" class="headerlink" title="内容删除样式"></a>内容删除样式</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml">~~内容~~ 显示删除样式<br></code></pre></td></tr></table></figure><p><del>Hello Markdown!</del></p><h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> 内容</span> <br><span class="hljs-meta">&gt;</span><span class="bash">&gt; 内容</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; 内容</span><br>输出效果见下面<br></code></pre></td></tr></table></figure><blockquote><p>Hello Markdown!</p><blockquote><p>Hello Markdown!</p><blockquote><p>Hello Markdown!</p></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//全屏分割线</span><br><span class="hljs-string">***</span><br><span class="hljs-string">//部分分割线</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><hr><hr><h2 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//在线图片，本体图片的插入</span><br>!<span class="hljs-selector-attr">[图片名]</span>(图片地址)<br></code></pre></td></tr></table></figure><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1229424709,3319526529&fm=26&gp=0.jpg" alt="在线图片样例"></p><blockquote><p>在线图片会涉及到版权，图床的选择等问题！</p></blockquote><hr><p><img src="/img/default.png" alt="本地图片样例"></p><blockquote><p>本地图片的路径是相对路径！且图片存放路径在/public/img下!</p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">[链接名](地址)<br></code></pre></td></tr></table></figure><p><a href="https://github.com/kolvzaki">My GitHub</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>无序列表<br>- 目录<span class="hljs-number">1</span><br>- 目录<span class="hljs-number">2</span><br>...<br><span class="hljs-regexp">//</span>有序列表<br>序号.名称<br><span class="hljs-number">1</span>.首页<br><span class="hljs-number">2</span>.目录<br><span class="hljs-number">3</span>.... <br></code></pre></td></tr></table></figure><ul><li>目录1</li><li>目录2</li><li>目录3</li></ul><p>1.首页<br>2.分类<br>3.目录</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 标题1 </span>|<span class="hljs-string"> 标题2   </span>|<span class="hljs-string"> 长长的标题3 </span>|<span class="hljs-string"> title 4 </span>|<br>|<span class="hljs-string"> ----- </span>|<span class="hljs-string"> --------- </span>|<span class="hljs-string"> ----------- </span>|<span class="hljs-string"> ------- </span>|<br>|<span class="hljs-string"> 内容1 </span>|<span class="hljs-string"> content 2 </span>|<span class="hljs-string">             </span>|<span class="hljs-string">         </span>|<br>|<span class="hljs-string"> 行3  </span>|<span class="hljs-string"> line3     </span>|<span class="hljs-string"> column 3    </span>|<span class="hljs-string">         </span>|<br></code></pre></td></tr></table></figure><blockquote><p>生成表格语法很麻烦，建议上网搜相关的快速生成</p></blockquote><table><thead><tr><th>标题1</th><th>标题2</th><th>长长的标题3</th><th>title 4</th></tr></thead><tbody><tr><td>内容1</td><td>content 2</td><td></td><td></td></tr><tr><td>行3</td><td>line3</td><td>column 3</td><td></td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是👴某种意义上的第一篇博文，也是新的开始，整来这东西希望能改一哈👴的懒癌，再懒下去👴要无了，学习的路线都规划好了，希望不会🕊</p>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/06/hello-world/"/>
    <url>/2021/02/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
